AWSTemplateFormatVersion: "2010-09-09"

Description: "This template will create an EC2 instance and other infrastrucure elements"

Parameters:
  vpcCidr:
    Description: "Give IP Range"
    Type: String
    Default: 10.0.0.0/16

  amiId:
    Description: "Id of custom ami"
    Type: String

  paramPublicSubnet1:
    Description: "Give IP Range for public subnet 1"
    Type: String
    Default: 10.0.1.0/24
  paramPublicSubnet2:
    Description: "Give IP Range for public subnet 2"
    Type: String
    Default: 10.0.2.0/24
    
  paramPublicSubnet3:
    Description: "Give IP Range for public subnet 3"
    Type: String
    Default: 10.0.3.0/24
  
  paramPrivateSubnet1:
    Description: "Give IP Range for privat subnet 1"
    Type: String
    Default: 10.0.4.0/24
  paramPrivateSubnet2:
    Description: "Give IP Range for private subnet 2"
    Type: String
    Default: 10.0.5.0/24
    
  paramPrivateSubnet3:
    Description: "Give IP Range for private subnet 3"
    Type: String
    Default: 10.0.6.0/24

     

  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '10'
    MaxValue: '30'
    ConstraintDescription: must be between 2 and 30 GiB.
  
  HostedZoneName:
    Description: The route53 HostedZoneName. For example, "mydomain.com."  Don't forget the period at the end.
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: !Ref vpcCidr
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: !Join [ "_", [ "VPC", !Ref AWS::StackName ] ]

# b) Create a Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "_", [ "InternetGateway", !Ref AWS::StackName ] ]
        
        
# c) Attach the Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:      
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
# a) Create a public route table for the VPC (will be public once it is associated with the Internet Gateway)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PublicRouteTable", !Ref AWS::StackName ] ]
          
  # b) Associate the public route table with the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
      

# c) Create a public subnet in AZ 1 (will be public once it is associated with public route table)
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ] # AZ 1
      CidrBlock: !Ref paramPublicSubnet1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "Subnet1", !Ref AWS::StackName ] ]
  # Create a public subnet in AZ 2 (will be public once it is associated with public route table)
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ] # AZ 2
      CidrBlock: !Ref paramPublicSubnet2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "Subnet2", !Ref AWS::StackName ] ]
# Create a public subnet in AZ 3 (will be public once it is associated with public route table)
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ] # AZ 3
      CidrBlock: !Ref paramPublicSubnet3
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "Subnet3", !Ref AWS::StackName ] ]      
 
  # d) Associate the public route table with the public subnet1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet1
  # Associate the public route table with the public subnet2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet2 
      
   # Associate the public route table with the public subnet3
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet3

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security Group for EC2"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: 
            Fn::GetAtt:
            - LoadBalancerSG
            - GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: 
            Fn::GetAtt:
            - LoadBalancerSG
            - GroupId
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: 
            Fn::GetAtt:
            - LoadBalancerSG
            - GroupId
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: 
            Fn::GetAtt:
            - LoadBalancerSG
            - GroupId
      Tags:
            - Key: Name
              Value: !Join [ "_", [ "SecurityGroup", !Ref AWS::StackName ] ]
      VpcId: !Ref VPC
  
  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties: 
  #     ImageId:  !Ref amiId
  #     InstanceType: t2.micro
  #     SecurityGroupIds: 
  #     - !Ref SecurityGroup
  #     BlockDeviceMappings:
  #     -
  #       DeviceName: /dev/sda1 
  #       Ebs:
  #           DeleteOnTermination: true
  #           VolumeSize: 50
  #           VolumeType: gp2
  #     SubnetId: !Ref Subnet1
  #     Tags:
  #           - Key: Name
  #             Value: !Join [ "_", [ "EC2", !Ref AWS::StackName ] ]
  #     UserData:
  #       Fn::Base64: 
  #         !Sub |
  #           #!/bin/bash
  #           yum update -y
  #           sudo echo "DB_Name=\"csye6225\"" >> /home/ubuntu/.env
  #           sudo echo "DB_User=\"csye6225\"" >> /home/ubuntu/.env
  #           sudo echo "DB_Pass=\"sagar2212db\"" >> /home/ubuntu/.env
  #           sudo echo "S3_Name=${S3Bucket}" >> /home/ubuntu/.env
  #           sudo echo "DB_host=${DatabaseMysql.Endpoint.Address}" >> /home/ubuntu/.env
  #     IamInstanceProfile: !Ref Ec2InstanceProfile
# Private route table ---------------
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PrivateRouteTable", !Ref AWS::StackName ] ]


  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ] # AZ 1
      CidrBlock: !Ref paramPrivateSubnet1
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PrivateSubnet1", !Ref AWS::StackName ] ]
  # Create a private subnet in AZ 2
  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ] # AZ 2
      CidrBlock: !Ref paramPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PrivateSubnet2", !Ref AWS::StackName ] ]

  myPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ] # AZ 3
      CidrBlock: !Ref paramPrivateSubnet3
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "PrivateSubnet3", !Ref AWS::StackName ] ]

  # f) Associate the private route table with the private subnet in AZ 1
  myPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet1
  #  Associate the private route table with the private subnet in AZ 2
  myPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet2

  myPrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet3

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security Group for Database"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "DatabaseSecurityGroup", !Ref AWS::StackName ] ]
      VpcId: !Ref VPC

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketEncryption:  
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName: !Join [ "", [ "prods3bucketsagar", !Ref AWS::StackName ] ]
      LifecycleConfiguration:
        Rules:
          - Id: S3Lifecycle
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 365
      Tags:
        - Key: Name
          Value: !Join [ "", [ "prods3bucketsagar", !Ref AWS::StackName ] ]

  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation Sample MySQL Parameter Group
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE
      Tags:
        - Key: Name
          Value: !Join [ "_", [ "DBParameterGroup", !Ref AWS::StackName ] ]
  DatabaseMysql:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: 'csye6225'
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Join [ "", [ "csye6225", !Ref AWS::StackName ] ]
      MultiAZ: False
      Engine: MySQL
      VPCSecurityGroups: 
        - !Ref DatabaseSecurityGroup
      MasterUsername: 'csye6225'
      MasterUserPassword: 'sagar2212db'
      DBParameterGroupName: !Ref RDSDBParameterGroup
      DBSubnetGroupName: !Ref DbSubnetGroup
      StorageEncrypted: True
      KmsKeyId: ccb0e497-87f8-4918-9145-3c6c691c1009
      PubliclyAccessible: False
      
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "Db Subnet Group"
      DBSubnetGroupName: !Join [ "_", [ "dbsubnetgroup", !Ref AWS::StackName ] ]
      SubnetIds: 
        - !Ref myPrivateSubnet1
        - !Ref myPrivateSubnet2
        - !Ref myPrivateSubnet3
      


  WebAppS3:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:DeleteObject"
            Resource: 
              - !Join [ "", [ "arn:aws:s3:::", !Ref S3Bucket,"/*" ] ]
              - !Join [ "", [ "arn:aws:s3:::", !Ref S3Bucket ] ]
          - Effect: "Allow"
            Action:
              - "cloudwatch:PutMetricData"
              - "ec2:DescribeVolumes"
              - "ec2:DescribeTags"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStreams"
              - "logs:DescribeLogGroups"
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
            Resource: 
              - "*"
          - Effect: "Allow"
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:GetItem"
            Resource: 
              - !GetAtt DynamoDBTable.Arn
          - Effect: "Allow"
            Action:
              - "sns:Publish"
            Resource: 
              - "arn:aws:sns:us-east-1:868454036435:CSYETopic_assignment8"

  
  EC2CSYE6225:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref WebAppS3
      RoleName: !Join [ "_", ["EC2-CSYE6225", !Ref AWS::StackName ] ]

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Join [ "_", ["Ec2InstanceProfile", !Ref AWS::StackName] ]
      Path: "/"
      Roles: 
       - !Ref EC2CSYE6225


  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            !GetAtt MyLambdaFnc.Arn
          Protocol: lambda
      TopicName: !Join [ "_", ["CSYETopic", !Ref AWS::StackName ] ]

  SESLambda:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ses:SendEmail"
            Resource: 
              - "arn:aws:ses:us-east-1:868454036435:identity/prod.sagarmalhotra.me"

  SESRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref SESLambda
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      RoleName: !Join [ "_", ["SESRole", !Ref AWS::StackName ] ]

  MyLambdaFnc:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "MyLambdaFnc"
      Role: !GetAtt SESRole.Arn
      Runtime: python3.8
      Handler: lambda_function.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            # TODO implement
            print("Dummy  Lambda Function")
  
  DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "Email"
            AttributeType: "S"
          -
            AttributeName: "Token"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Email"
            KeyType: "HASH"
          -
            AttributeName: "Token"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"
        TableName: "UserDetails"
        TimeToLiveSpecification:
          AttributeName: "TTL"
          Enabled: "True"

  LambdaFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt MyLambdaFnc.Arn
        SourceArn: arn:aws:sns:us-east-1:868454036435:CSYETopic_assignment8
        Principal: sns.amazonaws.com
  
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security Group for load balancer"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
            - Key: Name
              Value: !Join [ "_", [ "LoadBalancerSG", !Ref AWS::StackName ] ]
      VpcId: !Ref VPC

  AsgConfig:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - Ec2InstanceProfile
            - Arn
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 20
              VolumeType: "gp2"
              DeleteOnTermination: true
              Encrypted: True
              KmsKeyId: f042da0d-cb1f-4d81-8958-9cf495ad6a62
        ImageId: !Ref amiId
        # KeyName: MyKey
        InstanceType: t2.micro
        SecurityGroupIds: 
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              yum update -y
              sudo echo "DB_Name=\"csye6225\"" >> /home/ubuntu/.env
              sudo echo "DB_User=\"csye6225\"" >> /home/ubuntu/.env
              sudo echo "DB_Pass=\"sagar2212db\"" >> /home/ubuntu/.env
              sudo echo "S3_Name=${S3Bucket}" >> /home/ubuntu/.env
              sudo echo "DB_host=${DatabaseMysql.Endpoint.Address}" >> /home/ubuntu/.env
        


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: '300'
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref AsgConfig
        Version: !GetAtt AsgConfig.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: False
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      TargetGroupARNs:
        - !Ref LBTargetGroup
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"

  ScaleUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1

  ScaleDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: -1

  CPUHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      ActionsEnabled: True
      AlarmActions: 
        - !Ref ScaleUp
      AlarmDescription: "Alarm when average CPU usage is above 5%"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions: 
        -  Name: "AutoScalingGroupName"
           Value: !Ref AutoScalingGroup
      EvaluationPeriods: 1
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Period: 300
      Statistic: "Average"
      Threshold: 3

  CPULowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      ActionsEnabled: True
      AlarmActions: 
        - !Ref ScaleDown
      AlarmDescription: "Alarm when average CPU usage is below 3%"
      ComparisonOperator: "LessThanThreshold"
      Dimensions: 
        -  Name: "AutoScalingGroupName"
           Value: !Ref AutoScalingGroup
      EvaluationPeriods: 1
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Period: 300
      Statistic: "Average"
      Threshold: 2

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http2.enabled
          Value: true
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSG
      Subnets: 
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application

  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type : "forward"
          TargetGroupArn : !Ref LBTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates : 
       - CertificateArn : "arn:aws:acm:us-east-1:868454036435:certificate/899d07b5-c82e-46fc-b36d-b3ad70cbcbc0"

  LBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/app'
      HealthCheckPort: 5000
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 5000
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  
  LoadBalancerAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt AppLoadBalancer.DNSName
        HostedZoneId: !GetAtt AppLoadBalancer.CanonicalHostedZoneID
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref HostedZoneName
      Type: A






    
    

  



    


    

  
  
    
    
   
